name: Pipeline

on:
  push:
    branches:
      - main
  pull_request: {}

permissions:
  contents: read

env:
  # renovate:
  devcontainer: ghcr.io/wielewoutlabs/arc-cleaner-dev:edge@sha256:be731b04703f13b608b93fbf8e791fc8c5bce92ed91b63a09e39a075cd29e954
  workdir: /__w/arc-cleaner/arc-cleaner

jobs:
  vars:
    name: Vars
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Release please
        if: github.ref_type == 'branch' && github.ref_name == 'main'
        id: release_please
        uses: googleapis/release-please-action@v4.2.0
        with:
          release-type: go
          target-branch: ${{ github.ref_name }}
          config-file: .github/release-please.json

      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Filter paths
        if: github.event_name != 'workflow_dispatch'
        id: paths_filter
        uses: dorny/paths-filter@v3.0.2
        with:
          filters: |
            devcontainer:
            - "build/devcontainer/**"
      - name: Expose vars
        id: vars
        run: |-
          echo "sha_tag=sha-${{ github.sha }}" >> $GITHUB_OUTPUT

          release_version="${{ steps.release_please.outputs.releases_created == 'true' && steps.release_please.outputs.tag_name || '' }}"
          release_version="${release_version#"v"}"
          echo "release_version=$release_version" >> $GITHUB_OUTPUT
          release_version_major="$(echo "$release_version" | cut -d . -f 1)"
          echo "release_version_major=$release_version_major" >> $GITHUB_OUTPUT
          release_version_minor="$(echo "$release_version" | cut -d . -f 2)"
          echo "release_version_minor=$release_version_minor" >> $GITHUB_OUTPUT
          release_version_patch="$(echo "$release_version" | cut -d . -f 3)"
          echo "release_version_patch=$release_version_patch" >> $GITHUB_OUTPUT
    outputs:
      is_release: ${{ steps.release_please.outputs.releases_created == 'true' }}
      release_name: ${{ steps.release_please.outputs.tag_name }}
      release_version: ${{ steps.vars.outputs.release_version }}
      release_version_major: ${{ steps.vars.outputs.release_version_major }}
      release_version_minor: ${{ steps.vars.outputs.release_version_minor }}
      release_version_patch: ${{ steps.vars.outputs.release_version_patch }}
      release_upload_url: ${{ steps.release_please.outputs.upload_url }}
      release_html_url: ${{ steps.release_please.outputs.html_url }}
      is_main_branch: ${{ github.ref_type == 'branch' && github.ref_name == 'main' }}
      has_devcontainer_changed: ${{ github.event_name != 'workflow_dispatch' && steps.paths_filter.outputs.devcontainer }}
      devcontainer: ${{ (github.event_name != 'workflow_dispatch' && steps.paths_filter.outputs.devcontainer == 'true' && format('ghcr.io/wielewoutlabs/arc-cleaner-dev:{0}', steps.vars.outputs.sha_tag)) || env.devcontainer }}
      sha_tag: ${{ steps.vars.outputs.sha_tag }}

  devcontainer:
    name: Devcontainer
    needs:
      - vars
    if: needs.vars.outputs.has_devcontainer_changed == 'true'
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: |
            ghcr.io/wielewoutlabs/arc-cleaner-dev
          flavor: |
            latest=false
          tags: |
            type=edge
            type=raw,value=${{ needs.vars.outputs.sha_tag }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Install buildx
        uses: docker/setup-buildx-action@v3.11.1
        with:
          install: true
      - name: Build and push
        uses: docker/build-push-action@v6.18.0
        with:
          context: .
          file: build/devcontainer/Containerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build:
    name: Build
    needs:
      - vars
      - devcontainer
    if: |
      !cancelled() &&
      !contains(needs.devcontainer.result, 'failure')
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-24.04
    container:
      image: ${{ needs.vars.outputs.devcontainer }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Make workdir safe
        run: git config --global --add safe.directory ${{ env.workdir }}
      - name: Build
        run: |-
          for arch in amd64 arm64 ; do
            GOOS=linux \
            GOARCH=$arch \
            make build \
            DEBUG=false \
            WITH_OS_ARCH_SUFFIX=true \
            VERSION=${{ needs.vars.outputs.is_release == 'true' && needs.vars.outputs.release_version || github.ref_name }}
          done
      - name: Test
        run: make test-unit
      - name: Lint
        run: make lint
      - name: Upload binary
        uses: actions/upload-artifact@v4.6.2
        with:
          name: binaries
          path: |
            bin/arc-cleaner-linux-amd64
            bin/arc-cleaner-linux-arm64
          if-no-files-found: error

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3.4.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: |
            ghcr.io/wielewoutlabs/arc-cleaner
            wielewout/arc-cleaner
          flavor: |
            latest=false
            suffix=-rc
          tags: |
            type=edge
            type=raw,enable=${{ needs.vars.outputs.is_release }},priority=901,value=${{ needs.vars.outputs.release_version }}
            type=raw,enable=${{ needs.vars.outputs.is_release }},priority=900,value=${{ needs.vars.outputs.release_version_major }}.${{ needs.vars.outputs.release_version_minor }}
            type=raw,enable=${{ needs.vars.outputs.is_release }},priority=900,value=${{ needs.vars.outputs.release_version_major }}
            type=ref,event=pr
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1
      - name: Build and push
        uses: docker/build-push-action@v6.18.0
        with:
          context: .
          file: build/container/Containerfile
          platforms: linux/amd64,linux/arm64
          build-args: |
            WITH_OS_ARG_SUFFIX=true
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
      - name: First image
        id: first
        run: |
          image=$(echo "${{ steps.meta.outputs.tags }}" | head -n 1)
          echo "image=$image" >> $GITHUB_OUTPUT
    outputs:
      images: ${{ steps.meta.outputs.tags }}
      image: ${{ steps.first.outputs.image }}

  acceptance:
    name: Acceptance
    needs:
      - vars
      - build
    if: |
      !cancelled() &&
      contains(needs.build.result, 'success') &&
      needs.vars.outputs.is_main_branch == 'true'
    concurrency:
      group: ${{ format('{0}-{1}', github.workflow, github.ref_name) || github.run_id }}
      cancel-in-progress: false
    permissions:
      contents: read
      packages: read
    runs-on: ubuntu-24.04
    container:
      image: ${{ needs.vars.outputs.devcontainer }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Make workdir safe
        run: git config --global --add safe.directory ${{ env.workdir }}
      - name: Test
        run: >-
          USE_PREBUILT_CONTAINER_IMAGE=true
          CONTAINER_IMAGE=${{ needs.build.outputs.image }}
          make test-acceptance

  release:
    name: Release
    needs:
      - vars
      - build
      - acceptance
    if: |
      !cancelled() &&
      contains(needs.build.result, 'success') &&
      contains(needs.acceptance.result, 'success')
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-24.04
    container:
      image: ${{ needs.vars.outputs.devcontainer }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
    steps:
      - name: Download binaries
        if: needs.vars.outputs.is_release == 'true'
        uses: actions/download-artifact@v4.3.0
        with:
          pattern: binaries
          merge-multiple: true
          path: bin
      - name: Add version to binary names
        if: needs.vars.outputs.is_release == 'true'
        id: binaries
        run: |-
          release_binaries=""
          for binary in bin/* ; do
            suffix=${binary#"bin/arc-cleaner-"}
            release_binary_name="arc-cleaner-${{ needs.vars.outputs.release_version }}-$suffix"
            release_binary="bin/$release_binary_name"
            mv "$binary" "$release_binary"
            if [ -z "$release_binaries" ] ; then
              release_binaries="$release_binary_name"
            else
              release_binaries="$release_binaries $release_binary_name"
            fi
          done
          echo "binaries=$release_binaries" >> $GITHUB_OUTPUT
      - name: Release binaries
        if: needs.vars.outputs.is_release == 'true'
        uses: shogo82148/actions-upload-release-asset@v1.8.1
        with:
          upload_url: ${{ needs.vars.outputs.release_upload_url }}
          asset_path: bin/arc-cleaner-*

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3.4.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Release container images
        id: container_images
        run: |-
          release_container_images=""
          rc_images="${{ needs.build.outputs.images }}"
          rc_images=$(echo "$rc_images" | tr '\n' ' ')
          for rc_image in $rc_images ; do
            release_image=${rc_image%"-rc"}
            echo "Retagging $rc_image to $release_image"
            docker buildx imagetools create --tag $release_image $rc_image
            if [ -z "$release_container_images" ] ; then
              release_container_images="$release_image"
            else
              release_container_images="$release_container_images $release_image"
            fi
          done
          echo "container_images=$release_container_images" >> $GITHUB_OUTPUT

      - name: Checkout
        if: needs.vars.outputs.is_release == 'true'
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
      - name: Make workdir safe
        if: needs.vars.outputs.is_release == 'true'
        run: git config --global --add safe.directory ${{ env.workdir }}
      - name: Setup git user
        if: needs.vars.outputs.is_release == 'true'
        run: |-
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
      - name: Login to GitHub Container Registry
        run: |-
          helm registry login \
            ghcr.io \
            --username "${{ github.actor }}" \
            --password "${{ secrets.GITHUB_TOKEN }}"
      - name: Add version to chart
        if: needs.vars.outputs.is_release == 'true'
        run: |-
          sed -i 's/0.0.0/${{ needs.vars.outputs.release_version }}/g' deploy/chart/Chart.yaml
      - name: Package chart
        if: needs.vars.outputs.is_release == 'true'
        run: |-
          helm package deploy/chart
      - name: Upload chart
        if: needs.vars.outputs.is_release == 'true'
        uses: shogo82148/actions-upload-release-asset@v1.8.1
        with:
          upload_url: ${{ needs.vars.outputs.release_upload_url }}
          asset_path: arc-cleaner-chart-${{ needs.vars.outputs.release_version }}.tgz
      - name: Release chart
        if: needs.vars.outputs.is_release == 'true'
        id: chart
        run: |-
          helm push \
            arc-cleaner-chart-${{ needs.vars.outputs.release_version }}.tgz \
            $(echo "oci://ghcr.io/${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "chart=arc-cleaner-chart-${{ needs.vars.outputs.release_version }}.tgz" >> $GITHUB_OUTPUT

      - name: Add step summary
        if: needs.vars.outputs.is_release == 'true'
        run: |-
          newline=$'\n'

          binaries=""
          for binary in ${{ steps.binaries.outputs.binaries }} ; do
            binaries="$binaries* \`$binary\`$newline"
          done

          container_images=""
          for container_image in ${{ steps.container_images.outputs.container_images }} ; do
            container_images="$container_images* \`$container_image\`$newline"
          done

          chart="* \`${{ steps.chart.outputs.chart }}\`$newline"

          cat << EOF >> $GITHUB_STEP_SUMMARY
          # Release ${{ needs.vars.outputs.release_name }}

          ## Binaries
          $binaries

          ## Container images
          $container_images

          ## Chart
          $chart

          <br/>

          ---

          More info: [${{ needs.vars.outputs.release_html_url }}](${{ needs.vars.outputs.release_html_url }})
          EOF
